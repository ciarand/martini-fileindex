package fileindex

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"reflect"
	"unsafe"
)

func bindata_read(data, name string) ([]byte, error) {
	var empty [0]byte
	sx := (*reflect.StringHeader)(unsafe.Pointer(&data))
	b := empty[:]
	bx := (*reflect.SliceHeader)(unsafe.Pointer(&b))
	bx.Data = sx.Data
	bx.Len = len(data)
	bx.Cap = bx.Len

	gz, err := gzip.NewReader(bytes.NewBuffer(b))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _templates_page_html = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x52\xbb\x6e\xe3\x30\x10\xac\xe5\xaf\xe0\xa9\x3f\x12\xc6\xb5\xb4\x9a\xb3\x01\x1b\x70\x1e\x40\x94\x22\x25\x2d\xae\x22\x22\x14\x65\x70\xe9\x00\x8e\xa0\x7f\xcf\x52\x2f\x3f\x52\x44\xd5\x70\x76\x67\x77\x38\x54\xdb\x32\x0d\xa5\x71\xc0\x52\xdd\x14\xa7\x1a\x5c\x48\x59\xd7\x2d\xe4\x9f\xf5\xd3\xff\xfc\xed\x79\xc3\xb6\xf9\xc3\x3e\x5b\xc8\x0a\x94\xce\x16\x89\x0c\x26\x58\xc8\xf2\x5d\xbe\xdf\x48\x31\x1c\x88\xb5\xc6\x7d\x30\x0f\x76\x95\x62\x38\x5b\xc0\x0a\x80\xe6\x54\x1e\xca\x55\x2a\x84\x83\xa0\x9d\xe2\x87\xa6\x09\x18\xbc\x3a\x16\xda\xf1\xa2\xa9\xc5\x4c\x88\x7f\x7c\xc9\x97\xa2\x40\xbc\x70\xbc\x36\xd4\x85\x98\xd2\x72\x31\x6c\x97\x87\x46\x9f\xe3\x3a\x6d\x3e\x59\x61\x15\xe2\x2a\x2d\x1a\x17\x14\xf9\xf7\xd4\x97\x90\x3d\x75\xb0\x30\xd5\xfa\x43\xcf\x53\x61\xbc\x40\x8f\xfd\x00\x22\x9b\x3d\xaa\x1a\xe8\x26\xd5\x15\xb5\x57\x18\x58\xdd\x68\x53\x1a\xd0\x77\xb5\x17\xf3\x75\xd5\x4e\x68\x98\x15\xa9\x69\x81\x0c\xa3\x4f\xfa\x28\x5f\xaf\xdc\x3b\x30\xbe\x71\xc1\x1b\xc0\x18\x6e\x72\xeb\x82\xa0\x9e\x60\x22\xd5\x18\x5b\xdb\xf2\x57\x6f\xbb\x2e\xcd\x08\x45\x93\x5d\x27\x85\x9a\x25\xe2\xa2\xb9\x91\xe3\x51\xb9\xa8\xd8\x9e\x6a\xe5\x72\x33\xc8\x7a\xf2\x17\x65\xdb\x9a\x92\xf1\x1d\xae\x8d\x9f\x2c\xce\xf3\xfe\xde\x8e\xa0\x5e\xb0\x08\x3f\xda\xa6\xb5\x31\xa3\xfb\xb5\x51\xe3\xf4\x2c\xb9\x72\x31\x67\x18\xc3\xa2\x9e\x31\x21\xa2\xa7\x18\x09\xc6\x97\x8c\x2f\x2f\xe8\xe9\xe3\x0f\x31\x94\x2e\x82\xef\x00\x00\x00\xff\xff\x6b\x5c\x43\x0a\xc8\x02\x00\x00"

func templates_page_html() ([]byte, error) {
	return bindata_read(
		_templates_page_html,
		"templates/page.html",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	if f, ok := _bindata[name]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"templates/page.html": templates_page_html,
}
